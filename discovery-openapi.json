{
  "openapi": "3.0.1",
  "info": {
    "title": "Mintlify Discovery API",
    "description": "An API to integrate Mintlify discovery features into your product.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api-dsc.mintlify.com/v1"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/assistant/{domain}/message": {
      "post": {
        "x-mcp": {
          "enabled": true
        },
        "summary": "Generate Assistant Message",
        "description": "Generate a message response for the assistant with the specified domain",
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The domain identifier that can be found in the top left corner of the Mintlify dashboard"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "fp",
                  "messages"
                ],
                "properties": {
                  "fp": {
                    "type": "string",
                    "description": "Fingerprint identifier"
                  },
                  "threadId": {
                    "type": "string",
                    "description": "Optional thread identifier for conversation continuity"
                  },
                  "messages": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "role": {
                          "type": "string",
                          "enum": [
                            "user",
                            "assistant",
                            "system"
                          ],
                          "description": "The role of the message sender"
                        },
                        "content": {
                          "type": "string",
                          "description": "The content of the message"
                        },
                        "id": {
                          "type": "string",
                          "description": "Unique identifier for the message"
                        }
                      },
                      "required": [
                        "role",
                        "content"
                      ]
                    },
                    "description": "Array of messages in the conversation"
                  },
                  "retrievalPageSize": {
                    "type": "number",
                    "default": 5,
                    "description": "Number of retrieval results to return"
                  },
                  "filter": {
                    "type": "object",
                    "properties": {
                      "groups": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Optional array of group filters"
                      }
                    },
                    "description": "Optional filter criteria for the search"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Message generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A Response object that streams formatted data stream parts with the specified status, headers, and content. This matches what is expected from the AI SDK as documented at https://ai-sdk.dev/docs/ai-sdk-ui/streaming-data ."
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}